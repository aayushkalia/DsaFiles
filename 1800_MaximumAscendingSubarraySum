class Solution {
public:
    int maxAscendingSum(vector<int>& nums) {
        int maximum =INT_MIN;
        if(nums.size()==1) return nums[0];
        for(int i =0;i<nums.size()-1;i++){
            int sum=0;
            sum+=nums[i];
            for(int j =i+1;j<nums.size();j++){
                // if(j==i+1) sum+=nums[i];
                if(nums[j]>nums[j-1]){
                    sum+=nums[j];
                    maximum = max(sum,maximum);    
                }
                else{
                    maximum = max(sum,maximum);
                    sum=0;
                }}
        }
        return maximum;
    }
};

o(n2)
class Solution {
public:
    int maxAscendingSum(vector<int>& nums) {
        if(nums.size()==1) return nums[0];
        int sum = nums[0];
        int maximum =sum;
        for(int i =1;i<nums.size();i++){
            if(nums[i]>nums[i-1]){
                sum+=nums[i];
            }   
            else{
                sum=nums[i];
            }
            maximum = max(sum,maximum);
        }
        return maximum;
    }
};
o(n)
ðŸš€âœ…Maximum Ascending Subarray Sum - Easy To Understand C++ solution|| Beginner Friendly|| O(N) ðŸš€âœ…
Intuition
brute forcing would take O(n^2) but would work, tried experimenting for o(n)

Approach
the pass was used with only one loop to check the previous element, sum tracking the subarray sum and the max finding the maximum answer

Complexity
Time Complexity: O(n)