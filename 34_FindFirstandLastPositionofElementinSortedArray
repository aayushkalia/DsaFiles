class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int low = 0,mid =0,high = nums.size()-1,anslow=-1,anshigh=-1;;
        while(low<=high){
            mid = low+(high-low)/2;
            if(nums[mid]==target){
                low=mid+1;
                anshigh=mid;
            }
            else if(nums[mid]<target){
                low=mid+1;
            }
            else{
                high=mid-1;
            }//one highest
        }//two time bs, one for aisa high ele jo just equal ho neeche se, other jo just equal ho upar se
        low=0,high=nums.size()-1;
        while(low<=high){
            mid = low+(high-low)/2;
            if(nums[mid]==target){
                high=mid-1;
                anslow=mid;
            }//one lowest
            else if(nums[mid]<target){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }

        return {anslow,anshigh};
    }
};

Search element Range -most Beginner Friendly|| C++ solution|| Beats 100%|| Easy To Understand ðŸš€ðŸš€ðŸš€

Intuition
Thought to use binary search seeing the word sorted

Approach
decided to try searching one inside the other, but then realised takes O((logn)^2) hence used the two binary searches , similar to upper and lower bound, just without the greater than equal to and less than equal to , i used them as separate cases.

Complexity
âœ… Time Complexity: O(log N)
âœ… Space Complexity: O(1)