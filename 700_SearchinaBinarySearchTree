/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* searchBST(TreeNode* root, int val) {
        if(root!=NULL){
            if(val == root->val) return root;
            if(root->val > val)return searchBST(root->left,val);
            if(root->val <val)return searchBST(root->right,val);
            
        }
        return NULL;
    }
}; 
// ðŸš€100% solution beginner friendly

// kalia_aayush
// 1
// a few seconds ago
// C++
// Approach
// recursive approach for the searching in bst problem

// Code
// /**
//  * Definition for a binary tree node.
//  * struct TreeNode {
//  *     int val;
//  *     TreeNode *left;
//  *     TreeNode *right;
//  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
//  * };
//  */
// class Solution {
// public:

//     TreeNode* searchBST(TreeNode* root, int val) {
//         if(root!=NULL){
//             if(val == root->val) return root;
//             if(root->val > val)return searchBST(root->left,val);
//             if(root->val <val)return searchBST(root->right,val);
            
//         }
//         return NULL;
//     }
// };